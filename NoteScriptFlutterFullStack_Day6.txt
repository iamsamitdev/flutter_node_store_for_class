================================
üõ¥üõ¥ Flutter 3 Full Stack Workshop  üõ¥üõ¥
================================
‚úà DAY 1
1.‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°
2.‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• MySQL ‡∏ú‡πà‡∏≤‡∏ô API
3.‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡∏ú‡πà‡∏≤‡∏ô API (Node JS)
-------------------------------------------------------
üõ†1. ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°
üíª Java
---
java -version
where java
set JAVA_HOME

üíª Android SK
---
android
where android

üíª Node JS
---
node -v
npm -v
npx -v
where node

üíª Git
---
git version
where git

üíª Flutter SDK
---
flutter --version
flutter doctor
where flutter

üöÄ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô Flutter
---
Step 1: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏≠‡∏ö‡∏£‡∏°‡∏ô‡∏µ‡πâ
----
mkdir Flutter3FullStack

Step 2: ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á
----
flutter create --org  com.itgenius flutter_node_store

Step 2: ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ô VSCode
---
code flutter_node_store -r

Step 3: ‡∏£‡∏±‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå

üîå 2.‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• MySQL ‡∏ú‡πà‡∏≤‡∏ô API

Step 1: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏ä‡∏∑‡πà‡∏≠ ‚Äúflutterstore‚Äù
---
CREATE DATABASE flutterstore
    DEFAULT CHARACTER SET = 'utf8mb4';

Step 2: Clone Project from and Install node dependencies
---
git clone https://github.com/iamsamitdev/serverapi_ts serverapi

Step 3: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠ .env_example ‡πÄ‡∏õ‡πá‡∏ô .env ‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ
---
DB_HOST=127.0.0.1
DB_USER=root
DB_PASSWORD=123456
DB_PORT=3306
DB_DATABASE=flutterstore
ENV=development
PORT=3000
JWT_SECRET=itgenius@2023secret

Step 4: ‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Library
---
npm install

Step 5: ‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á migrate ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 
---
npx knex migrate:latest
npm run knex:migrate:latest

Step 6: ‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á seed ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
---
npx knex seed:run

Step 7: ‡∏£‡∏±‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå Node.JS Express
---
npm start

Step 8: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API Register
---
http://localhost:3000/api/auth/register

Method : Post
Body: Json
{
  "firstname":"Samit",
  "lastname":"Koyom",
  "email":"samit@email.com",
  "password":"123456"
}

Step 9: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API Login
---
http://localhost:3000/api/auth/login

Body: Json
{
  "email":"samit@email.com",
  "password":"123456"
}

Step 10: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API List Products
---
http://localhost:3000/api/products
Method: Get
Auth: Bearer Token

Step 11: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API List Products by id
---
http://localhost:3000/api/products/3
Method: Get
Auth: Bearer Token

üîå 3.‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡∏ú‡πà‡∏≤‡∏ô API (Node JS)

Step 12: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API Create Product
---
http://localhost:3000/api/products

Method : Post
Auth: Bearer Token
Body: Form

Field name	value
----------------------------------------------------
name		test some product
description	lorem ipsonefa
barcode		845964464485
stock		10
price		29500
category_id	1
user_id		1
status_id		1

Files
---------------------------------------------------
photo		example.jpg

Step 13: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API Edit Product
---
http://localhost:3000/api/products/18

Method : Put
Auth: Bearer Token
Body: Json
{
  "name":"test some product update",
  "description":"lorem ipsonefa update",
  "barcode":"845964464485",
  "stock":11,
  "price":39500,
  "category_id":1,
  "user_id":1,
  "status_id":1
}

Step 14: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API Delete Product
---
http://localhost:3000/api/products/18

Method : Delete
Auth: Bearer Token

-------------------------------------------------------
‚úà DAY 2
-------------------------------------------------------
4: ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö State ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡πÉ‡∏ô Flutter
5: Flutter Layout ‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
6: ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡∏Ç‡∏∂‡πâ‡∏ô
7: Workshop CRUD ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å NodeJS API
-------------------------------------------------------
üîÆ 4. ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö State ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡πÉ‡∏ô Flutter
üîÆ 5: Flutter Layout ‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
üîÆ 6: ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡∏Ç‡∏∂‡πâ‡∏ô

‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå‡πÉ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ
Flutter_Node_Store
==================
+---android
+---assets
|   +---fonts
|   \---images
+---build
+---functions
+---ios
+---lib
|   +---components
|   |   +---mobile_layout.dart
|   |   +---responsive_layout.dart
|   |   +---rounded_button.dart
|   |   +---social_media_option.dart
|   |   \---web_layout.dart
|   +---models
|   +---screens
|   |   +---login
|   |   |   +---login_form.dart
|   |   |   \---login_screen.dart
|   |   \---welcome
|   |   |   \---welcome_screen.dart
|   +---services
|   +---themes
|   |   +---colors.dart
|   |   +---styles.dart
|   |   \---text.dart
|   \---utils
+---app_router.dart
+---main.dart
+---linux
+---macos
+---serverapi
+---test
+---web
+---.gitignore
+---.metadata
+---analysis_options.yaml
+---pubspect.yaml
+---README.md

-------------------------------------------------------
‚úà DAY 3
-------------------------------------------------------
Section 7: Workshop CRUD ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å NodeJS API
Section 8: Workshop CRUD ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å NodeJS API (‡∏ï‡πà‡∏≠)
Section 9: ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ State ‡∏î‡πâ‡∏ß‡∏¢ Provider
-------------------------------------------------------
Section 7: Workshop CRUD ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å NodeJS API

Flutter_Node_Store
==================
+---android
+---assets
|   +---fonts
|   \---images
+---build
+---functions
+---ios
+---lib
|   +---components
|   |   +---custom_textfield.dart
|   |   +---mobile_layout.dart
|   |   +---responsive_layout.dart
|   |   +---rounded_button.dart
|   |   +---social_media_option.dart
|   |   \---web_layout.dart
|   +---models
|   +---screens
|   |   +---forgotpassword
|   |   |   +---forgot_password_form.dart
|   |   |   \----forgot_password_screen.dart
|   |   +---login
|   |   |   +---login_form.dart
|   |   |   \---login_screen.dart
|   |   +---register
|   |   |   +---register_form.dart
|   |   |   \---register_screen.dart
|   |   \---welcome
|   |   |   \---welcome_screen.dart
|   +---services
|   +---themes
|   |   +---colors.dart
|   |   +---styles.dart
|   |   \---text.dart
|   \---utils
|   |   |   +---constants.dart
+---app_router.dart
+---main.dart
+---linux
+---macos
+---serverapi
+---test
+---web
+---.gitignore
+---.metadata
+---analysis_options.yaml
+---pubspect.yaml
+---README.md

Step 1: ‡∏°‡∏≤‡∏ù‡∏∂‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á Custom Widget ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö TextField
---
‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå custom_textfield.dart ‡πÉ‡∏ô lib/components
---
import 'package:flutter/material.dart';

// CustomTextField ‡∏Ñ‡∏∑‡∏≠ Widget ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡πÄ‡∏≠‡∏á
Widget customTextField({
  required TextEditingController controller,
  required String hintText,
  required Icon prefixIcon,
  required bool obscureText,
  required String? Function(String?)? validator,
}) {
  return TextFormField(
    controller: controller,
    keyboardType: TextInputType.emailAddress,
    autofocus: false,
    enableSuggestions: false,
    autocorrect: false,
    obscureText: obscureText,
    decoration: InputDecoration(
      hintText: hintText,
      prefixIcon: prefixIcon,
      border: OutlineInputBorder(
        borderRadius: BorderRadius.circular(40),
        borderSide: const BorderSide(width: 0, style: BorderStyle.none),
      ),
      filled: true,
      isDense: true,
      contentPadding: const EdgeInsets.fromLTRB(10, 10, 10, 10),
      fillColor: Colors.grey[300],
    ),
    validator: validator,
  );
}

Step 2: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô (register)
---
|   |   +---register
|   |   |   +---register_form.dart
|   |   |   \----register_screen.dart

Step 3: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏•‡∏∑‡∏°‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (forgotpass)
---
|   |   +---forgotpassword
|   |   |   +---forgot_password_form.dart
|   |   |   \----forgot_password_screen.dart

Step 4: ‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á Storage ‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
---
‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á library "shared_preferences"
  # Shared Preferences
  shared_preferences: ^2.2.0

Step 5: Set ‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö SharedPreferences ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Ñ‡∏¢‡πÅ‡∏™‡∏î‡∏á Intro ‡πÅ‡∏•‡πâ‡∏ß
‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå welcome_screen.dart
---
void _onIntroEnd(context) async {

    SharedPreferences prefs = await SharedPreferences.getInstance();
    prefs.setBool('welcomeStatus', true);

    // ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤ Login
    Navigator.pushReplacementNamed(context, AppRouter.login);
  }

Step 6: ‡∏Å‡∏≥‡∏´‡∏ô‡∏î initialRoute ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö app ‡∏ó‡∏µ‡πà‡πÑ‡∏ü‡∏•‡πå  main.dart
---
var initialRoute;

...
void main() async {

  // ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ WidgetsFlutterBinding.ensureInitialized()
  // ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ SharedPreferences ‡πÑ‡∏î‡πâ
  WidgetsFlutterBinding.ensureInitialized();

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ prefs ‡πÑ‡∏ß‡πâ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤ SharedPreferences
  SharedPreferences prefs = await SharedPreferences.getInstance();

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏Ñ‡∏¢‡πÅ‡∏™‡∏î‡∏á Intro ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á 
  if (prefs.getBool('welcomeStatus') == true) {
    initialRoute = AppRouter.login;
  } else {
    initialRoute = AppRouter.welcome;
  }

  runApp(const MyApp());
}

...
@override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'Node Store App',
      theme: AppTheme.lightTheme,
      initialRoute: initialRoute,
      routes: AppRouter.routes,
    );
  }


Step 7: ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á lib ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö API
---
  # logger for debugging
  logger: ^2.0.2+1 

  # Network connectivity
  connectivity_plus: ^4.0.1

  # dio
  dio: ^5.3.0

Step 8: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå constants.dart ‡πÑ‡∏ß‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î baseURLAPI ‡∏ó‡∏µ‡πà lib/uitls
---
|   \---utils
|   |   |   +---constants.dart

‡∏Å‡∏≥‡∏´‡∏ô‡∏î path ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ
---
// API URL
// Local
const baseURLAPI = 'http://192.168.1.44:3000/api/';
const baseURLImage = 'http://192.168.1.44:3000/uploads/images/';

// Server
// const baseURLAPI = 'https://serverapi-node.onrender.com/api/';
// const baseURLImage = 'https://serverapi-node.onrender.com/uploads/images/';

Step 9: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå utility.dart ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö network ‡∏ó‡∏µ‡πà lib/uitls
---
|   \---utils
|   |   |   +---constants.dart
|   |   |   +---utility.dart

‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏Ñ‡πâ‡∏î‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ
---
import 'package:connectivity_plus/connectivity_plus.dart';

class Utility {

  // Check Network Connection
  static Future<String> checkNetwork() async {
    
    var checkNetwork = await Connectivity().checkConnectivity();

    if(checkNetwork == ConnectivityResult.none){
      return '';
    } else if(checkNetwork == ConnectivityResult.mobile){
      return 'mobile';
    } else if(checkNetwork == ConnectivityResult.wifi){
      return 'wifi';
    }
    
    return '';

  }

}

Step 10: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå dio_config.dart ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ config ‡πÉ‡∏´‡πâ Dio ‡∏ó‡∏µ‡πà lib/services
---
import 'package:dio/dio.dart';
import 'package:flutter_node_store/main.dart';
import 'package:flutter_node_store/utils/constants.dart';

class DioConfig {

  static final Dio _dio = Dio()
  ..interceptors.add(
    InterceptorsWrapper(
      onRequest: (options, handler) async {
        options.headers['Accept'] = 'application/json';
        options.headers['Content-Type'] = 'application/json';
        options.baseUrl = baseURLAPI;
        return handler.next(options);
      },
      onResponse: (response, handler) async {
        return handler.next(response);
      },
      onError: (DioException e, handler) {
        switch(e.response?.statusCode){
          case 400:
            logger.e('Bad Request');
            break;
          case 401:
            logger.e('Unauthorized');
            break;
          case 403:
            logger.e('Forbidden');
            break;
          case 404:
            logger.e('Not Found');
            break;
          case 500:
            logger.e('Internal Server Error');
            break;
          default:
            logger.e('Something went wrong');
            break;
        }
        return handler.next(e);
      }
    )
  );

  static Dio get dio => _dio;
}

Step 11: ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô rest_api.dart ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ login/register ‡∏ó‡∏µ‡πà lib/services
---
import 'dart:convert';

import 'package:dio/dio.dart';
import 'package:flutter_node_store/main.dart';
import 'package:flutter_node_store/services/dio_config.dart';

class CallAPI {

  // Create Dio Instance
  final Dio _dio = DioConfig.dio;

  // Register API
  registerAPI(data) async {
    try {
      final response = await _dio.post('auth/register', data: data);
      logger.d(response.data);
      return jsonEncode(response.data);
    } catch (e) {
      print(e);
    }
  }

  // Login API
  loginAPI(data) async {
    try {
      final response = await _dio.post('auth/login', data: data);
      logger.d(response.data);
      return jsonEncode(response.data);
    } catch (e) {
      print(e);
    }
  }

}

Step 12: ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£ register ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö webapi ‡∏ó‡∏µ‡πà‡πÑ‡∏ü‡∏•‡πå lib/screens/register/register_form.dart
---
RoundedButton(
                  label: "SIGN UP",
                  onPressed: () async {
                    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≠‡∏£‡πå‡∏°
                    if (_formKeyRegister.currentState!.validate()) {
                      // ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                      _formKeyRegister.currentState!.save();

                      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏Ç‡πâ‡∏á‡∏≤‡∏ô API Register
                      var response = await CallAPI().registerAPI({
                        "firstname": _firstNameController.text,
                        "lastname": _lastNameController.text,
                        "email": _emailController.text,
                        "password": _passwordController.text
                      });

                      var body = jsonDecode(response);

                      logger.i(body);

                      if (body['message'] == 'No Network Connection') {
                        // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Internet
                        ScaffoldMessenger.of(context).showSnackBar(
                          SnackBar(
                            key: const Key('no_network_register'),
                            content: Center(
                              child: const Text('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Internet'),
                            ),
                            backgroundColor: Colors.red,
                          ),
                        );
                      } else {
                        if (body['status'] == 'ok') {
                          // ‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                          ScaffoldMessenger.of(context).showSnackBar(
                            SnackBar(
                              key: const Key('register_success'),
                              content: Center(
                                child: Text(body['message']),
                              ),
                              backgroundColor: Colors.green,
                            ),
                          );
                          // ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Login
                          Navigator.pushReplacementNamed(
                              context, AppRouter.login);
                        } else {
                          // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Error
                          ScaffoldMessenger.of(context).showSnackBar(
                            SnackBar(
                              key: const Key('register_error'),
                              content: Center(
                                child: Text(body['message']),
                              ),
                              backgroundColor: Colors.red,
                            ),
                          );
                        }
                      }
                    }
                  },
                ),

-------------------------------------------------------
‚úà DAY 4
-------------------------------------------------------
Section 8: Workshop CRUD ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å NodeJS API (‡∏ï‡πà‡∏≠)
Section 9: ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ State ‡∏î‡πâ‡∏ß‡∏¢ Provider
Section 10: ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡πÅ‡∏≠‡∏û‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏†‡∏≤‡∏©‡∏≤
Section 11: ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ State ‡πÅ‡∏•‡∏∞ Route ‡∏î‡πâ‡∏ß‡∏¢ GetX
-------------------------------------------------------
Section 8: Workshop CRUD ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å NodeJS API (‡∏ï‡πà‡∏≠)

Step 1: ‡∏¢‡πâ‡∏≤‡∏¢ logger ‡∏à‡∏≤‡∏Å main.dart ‡πÑ‡∏õ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà‡πÑ‡∏ü‡∏•‡πå utility.dart
---
class Utility {

  // Logger
  final logger = Logger(
    printer: PrettyPrinter(
      methodCount: 1,
      colors: true,
      printEmojis: true,
      printTime: false,
    )
  );

  // Test Logger
  void testLogger() {
    logger.t('Verbose log');
    logger.d('Debug log');
    logger.i('Info log');
    logger.w('Warning log');
    logger.e('Error log');
    logger.f('What a terrible failure log');
  }

.
.
.
}

Step 2: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å logger ‡∏ó‡∏µ‡πà‡πÑ‡∏ü‡∏•‡πå main.dart
---
import 'package:flutter_node_store/utils/utility.dart';

void main() async {
   Utility().testLogger();
}

Step 3: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ logger ‡∏ó‡∏µ‡πà‡πÑ‡∏ü‡∏•‡πå dio_config.dart, rest_api.dart ‡πÅ‡∏•‡∏∞ register_form.dart
---
Utility().logger.e('Bad Request');
..
Utility().logger.d(response.data);
..
Utility().logger.i(body);

Step 4: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Alert Dialog ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå utility.dart
---
class Utility {
.
.
.

// Alert Dialog
  static showAlertDialog(context, title, content) {
    AlertDialog buildAlertDialog(Color backgroundColor, IconData icon) {
      return AlertDialog(
        shape: const RoundedRectangleBorder(
          borderRadius: BorderRadius.all(
            Radius.circular(15.0),
          ),
        ),
        content: Column(
          mainAxisAlignment: MainAxisAlignment.spaceAround,
          children: [
            CircleAvatar(
              backgroundColor: backgroundColor,
              radius: 35,
              child: Icon(
                icon,
                size: 40,
                color: Colors.white,
              ),
            ),
            Text(content),
          ],
        ),
        actions: [
          Center(
            child: TextButton(
              onPressed: () {
                Navigator.pop(context);
              },
              child: const Text('‡∏ï‡∏Å‡∏•‡∏á'),
            ),
          ),
        ],
      );
    }
    switch (title) {
      case "ok":
        return showDialog(
          context: context,
          builder: (BuildContext context) => FractionallySizedBox(heightFactor: 0.4, child: buildAlertDialog(Colors.green[700]!, Icons.check)),
        );
      case "error":
        return showDialog(
          context: context,
          builder: (BuildContext context) => FractionallySizedBox(heightFactor: 0.4, child: buildAlertDialog(Colors.red[700]!, Icons.close)),
        );
      default:
        return showDialog(
          context: context,
          builder: (BuildContext context) => FractionallySizedBox(heightFactor: 0.4, child: buildAlertDialog(Colors.blue[700]!, Icons.info_outline)),
        );
    }
  }

}

Step 5: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå responsive_layout.dart
‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ã‡πà‡∏≠‡∏ô keyboard ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏∑‡πà‡∏ô‡∏ô‡∏≠‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°
---
return Scaffold(
body: GestureDetector(
onTap: () {
          // ‡∏õ‡∏¥‡∏î‡∏Ñ‡∏µ‡∏¢‡πå‡∏ö‡∏≠‡∏£‡πå‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏ó‡∏µ‡πà‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏∑‡πà‡∏ô
          FocusScope.of(context).unfocus();
        },
        child: Container(
.
.
)
}

Step 6: ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó login api ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå lib/services/rest_api.dart
---
  // Login API
  loginAPI(data) async {
    // Check Network Connection
    if(await Utility.checkNetwork() == ''){
      return jsonEncode(
        {'message': 'No Network Connection'}
      );
    }else{
      try {
        final response = await _dio.post('auth/login', data: data);
        logger.d(response.data);
        return jsonEncode(response.data);
      } catch (e) {
        logger.e(e);
      }
    }
  }

Step 7: ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÑ‡∏ü‡∏•‡πå login_form.dart
---
RoundedButton(
                    label: "LOGIN",
                    onPressed: () async {
                      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≠‡∏£‡πå‡∏°
                      if (_formKeyLogin.currentState!.validate()) {
                        // ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                        _formKeyLogin.currentState!.save();

                        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
                        var response = await CallAPI().loginAPI(
                          {
                            "email": _emailController.text,
                            "password": _passwordController.text
                          }
                        );

                        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å API
                        var body = jsonDecode(response);

                        Utility().logger.i(body);

                        if (body["message"] == "No Network Connection") {
                          // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Internet
                            Utility.showAlertDialog(context, '', '${body["message"]}');
                        } else {
                          if (body["status"] == "ok") {
                            // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                            Utility.showAlertDialog(context, body["status"], '${body["message"]}');
                          } else {
                            // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                            Utility.showAlertDialog(context, body["status"], '${body["message"]}');
                          }
                        }

                      }
  })

Step 8: ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÑ‡∏ü‡∏•‡πå utility.dart ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á SharedPreference ‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
---
class Utility {
.
.

// Shared Preferences ==============
  static SharedPreferences? _preferences;
  static Future initSharedPrefs() async => _preferences = await SharedPreferences.getInstance();

  // Get Shared Preferences
  static dynamic getSharedPreference(String key) {
    if(_preferences == null) return null;
    return _preferences!.get(key);
  }

  // Set Shared Preferences
  static Future<bool> setSharedPreference(String key, dynamic value) async {
    if(_preferences == null) return false;
    if(value is String) return await _preferences!.setString(key, value);
    if(value is int) return await _preferences!.setInt(key, value);
    if(value is bool) return await _preferences!.setBool(key, value);
    if(value is double) return await _preferences!.setDouble(key, value);
    return false;
  }

  // Remove Shared Preferences
  static Future<bool> removeSharedPreference(String key) async {
    if(_preferences == null) return false;
    return await _preferences!.remove(key);
  }

  // Clear Shared Preferences
  static Future<bool> clearSharedPreference() async {
    if(_preferences == null) return false;
    return await _preferences!.clear();
  }

  // Check Shared Preferences
  static Future<bool> checkSharedPreference(String key) async {
    if(_preferences == null) return false;
    return await _preferences!.containsKey(key);
  }

  // ================================
.
.
}

Step 9: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ SharedPreference ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤ main.dart
---
void main() async {
.
.
// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ SharedPreferences
  await Utility.initSharedPrefs();

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏Ñ‡∏¢‡πÅ‡∏™‡∏î‡∏á Intro ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á 
  if (Utility.getSharedPreference('welcomeStatus') == true) {
    initialRoute = AppRouter.login;
  } else {
    initialRoute = AppRouter.welcome;
  }
.
.
}

Step 10: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ SharedPreference ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤ welcome_screen.dart
---
void _onIntroEnd(context) async {

    // Set ‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö SharedPreferences ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Ñ‡∏¢‡πÅ‡∏™‡∏î‡∏á Intro ‡πÅ‡∏•‡πâ‡∏ß
    await Utility.setSharedPreference('welcomeStatus', true);

.
.
  } 

Step 11: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤ dashboard_screen.dart
---
import 'package:flutter/material.dart';

class DashboardScreen extends StatefulWidget {
  const DashboardScreen({super.key});

  @override
  State<DashboardScreen> createState() => _DashboardScreenState();
}

class _DashboardScreenState extends State<DashboardScreen> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Dashboard'),
      ),
      body: const Center(
        child: Text('Dashboard Screen'),
      )
    );
  }
}

Step 12: ‡∏Å‡∏≥‡∏´‡∏ô‡∏î router ‡∏ó‡∏µ‡πà‡πÑ‡∏ü‡∏•‡πå app_router.dart
---
class AppRouter {
  
  // Router Map Key
...
  static const String dashboard = 'dashboard';
 
  // Router Map
  static get routes => {
   ...
    dashboard: (context) => const DashboardScreen(),
  };

}

Step 13: Set ‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö SharedPreferences ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ login_form ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£ login ‡πÅ‡∏•‡πâ‡∏ß
---
if (body["status"] == "ok") {

 await Utility.setSharedPreference('loginStatus', true);
                            await Utility.setSharedPreference('token', body["token"]);
                            await Utility.setSharedPreference('user', body["user"]);

                            // ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Dashboard
                            Navigator.pushReplacementNamed(context, AppRouter.dashboard);

}


Step 14: ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å initialRoute ‡∏ó‡∏µ‡πà‡πÑ‡∏ü‡∏•‡πå main.dart
---
  if (Utility.getSharedPreference('loginStatus') == true) { // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏Ñ‡∏¢ Login ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    initialRoute = AppRouter.dashboard;
  } else if(Utility.getSharedPreference('welcomeStatus') == true) { // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏Ñ‡∏¢‡πÅ‡∏™‡∏î‡∏á Intro ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á 
    initialRoute = AppRouter.login;
  } else { // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡πÅ‡∏™‡∏î‡∏á Intro ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á Intro ‡∏Å‡πà‡∏≠‡∏ô
    initialRoute = AppRouter.welcome;
  }

Step 15: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏á (drawerpage) ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå drawerpage
---
info_screen.dart
about_screen.dart
contact_screen.dart

---
import 'package:flutter/material.dart';

class InfoScreen extends StatelessWidget {
  const InfoScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Info'),
      ),
      body: const Center(
        child: Text('Info Screen'),
      )
    );
  }
}

Step 16: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô app_router.dart
---
class AppRouter {
..
  static const String info = 'info';
  static const String about = 'about';
  static const String contact = 'contact';

static get routes => {
    info: (context) => const InfoScreen(),
    about: (context) => const AboutScreen(),
    contact: (context) => const ContactScreen(),
};
..
}

Step 17: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô drawer ‡∏ó‡∏µ‡πà‡πÑ‡∏ü‡∏•‡πå dashboard_screen.dart
---
      drawer: Drawer(
        // backgroundColor: primary,
        child: Column(
          children: [
            ListView(
              shrinkWrap: true,
              children: [
                UserAccountsDrawerHeader(
                  decoration: BoxDecoration(
                    color: Colors.teal,
                  ),
                  accountName: Text('Samit Koyom'),
                  accountEmail: Text('samit@email.com'),
                  currentAccountPicture: CircleAvatar(
                    backgroundImage: AssetImage('assets/images/noavartar.png'),
                  ),
                  otherAccountsPictures: [
                    CircleAvatar(
                      backgroundImage:
                          AssetImage('assets/images/noavartar.png'),
                    ),
                  ],
                ),
                ListTile(
                  leading: Icon(Icons.info_outline),
                  title: Text('Info'),
                  onTap: () {
                    Navigator.pushNamed(context, AppRouter.info);
                  },
                ),
                ListTile(
                  leading: Icon(Icons.person_outline),
                  title: Text('About'),
                  onTap: () {
                    Navigator.pushNamed(context, AppRouter.about);
                  },
                ),
                ListTile(
                  leading: Icon(Icons.email_outlined),
                  title: Text('Contact'),
                  onTap: () {
                    Navigator.pushNamed(context, AppRouter.contact);
                  },
                ),
              ],
            ),
            Expanded(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.end,
                children: [
                  ListTile(
                    leading: Icon(Icons.exit_to_app_outlined),
                    title: Text('Logout'),
                    onTap: _logout,
                  ),
                ],
              ),
            ),
          ],
        ),
      ),


Step 18: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô _logout ‡∏ó‡∏µ‡πà‡πÑ‡∏ü‡∏•‡πå dashboard_screen.dart
---
  // Logout Function   // Logout Function -----------------------------------------------------------
  _logout() {
    // Remove token, loginStatus shared preference
    Utility.removeSharedPreference('token');
    Utility.removeSharedPreference('loginStatus');

    // Clear All Route
    Navigator.pushNamedAndRemoveUntil(
      context,
      AppRouter.login,
      (route) => false,
    );
  }
  // ---------------------------------------------------------------------------

Step 19: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏™‡πà‡∏ß‡∏ô bottomnavpage
---
home_screen.dart
report_screen.dart
notification_screen.dart
setting_screen.dart
profile_screen.dart

---
import 'package:flutter/material.dart';

class HomeScreen extends StatelessWidget {
  const HomeScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return const Scaffold(
      body: Center(
        child: Text('Home Screen'),
      ),
    );
  }
}

Step 20: ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô bottomNavigationBar
---
// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö title ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏ô‡πâ‡∏≤
  String _title = 'Flutter Store';

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö index ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏ô‡πâ‡∏≤
  int _currentIndex = 0;

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á List ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏ô‡πâ‡∏≤
  final List<Widget> _children = [
    HomeScreen(),
    ReportScreen(),
    NotificationScreen(),
    SettingScreen(),
    ProfileScreen()
  ];

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏Ç‡∏±‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πâ‡∏≤ ‡πÇ‡∏î‡∏¢‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ index ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏ó‡∏µ‡πà bottomNavigationBar
  void onTabTapped(int index) {
    setState(
      () {
        _currentIndex = index;
        switch (index) {
          case 0:
            _title = 'Home';
            break;
          case 1:
            _title = 'Report';
            break;
          case 2:
            _title = 'Notification';
            break;
          case 3:
            _title = 'Setting';
            break;
          case 4:
            _title = 'Profile';
            break;
          default:
            _title = 'Flutter Store';
            break;
        }
      },
    );
  }

Step 21: ‡∏Å‡∏≥‡∏´‡∏ô‡∏î bottom tab
---
appBar: AppBar(
    title: Text(_title),
),

body: _children[_currentIndex],

bottomNavigationBar: BottomNavigationBar(
        onTap: (value) {
          onTabTapped(value);
        },
        currentIndex: _currentIndex,
        type: BottomNavigationBarType.fixed,
        selectedItemColor: primaryDark,
        unselectedItemColor: secondaryText,
        items: [
          BottomNavigationBarItem(
            icon: Icon(Icons.home_outlined),
            label: 'Home'
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.show_chart_outlined),
            label: 'Report'
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.notifications_outlined),
            label: 'Notification'
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.settings_outlined),
            label: 'Setting'
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.person_outline),
            label: 'Profile'
          ),
        ]
      ),

Step 22: Create GridView and ListView in home_screen.dart
---

// Toggle between ListView and GridView
  bool _isGridView = true;

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏•‡∏±‡∏ö‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á ListView ‡πÅ‡∏•‡∏∞ GridView
  void _toggleView(){
    setState(() {
      _isGridView = !_isGridView;
    });
  }

 @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        leading: IconButton(
          onPressed: _toggleView, 
          icon: Icon(_isGridView ? Icons.list_outlined: Icons.grid_view)
        ),
        title: const Text('‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤'),
        actions: [
          IconButton(
            onPressed: (){
              // 
            }, 
            icon: const Icon(Icons.add)
          )
        ],
      ),
      body: _isGridView ? _gridView() : _listView(),
    );
  }

// _gridView Widget -----------------------------------------------------------
  Widget _gridView(){
    return GridView.builder(
      gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
        crossAxisCount: 2 // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
      ), 
      itemCount: 12,
      itemBuilder: (context, index){
        return Padding(
          padding: const EdgeInsets.all(8.0),
          child: Container(
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.circular(10),
              boxShadow: const [
                BoxShadow(
                  color: Colors.grey,
                  offset: Offset(0, 1),
                  blurRadius: 2,
                )
              ]
            ),
          ),
        );
      }
    );
  }
  // ---------------------------------------------------------------------------

// _listView Widget -----------------------------------------------------------
  Widget _listView(){
    return ListView.builder(
      itemCount: 12,
      itemBuilder: (context, index){
        return Padding(
          padding: const EdgeInsets.only(top: 8.0, left: 8.0, right: 8.0),
          child: SizedBox(
            height: 350,
            child: Container(
              decoration: BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.circular(10),
                boxShadow: const [
                  BoxShadow(
                    color: Colors.grey,
                    offset: Offset(0, 1),
                    blurRadius: 2,
                  )
                ]
              ),
            ),
          )
        );
      }
    );
  }
  // ---------------------------------------------------------------------------

Step 22: ‡∏™‡∏£‡πâ‡∏≤‡∏á model ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• api product ‡∏ó‡∏µ‡πà‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå models/product_model.dart
---
import 'dart:convert';

List<ProductModel> productModelFromJson(String str) => List<ProductModel>.from(json.decode(str).map((x) => ProductModel.fromJson(x)));

String productModelToJson(List<ProductModel> data) => json.encode(List<dynamic>.from(data.map((x) => x.toJson())));

class ProductModel {
    int? id;
    String? name;
    String? description;
    String? barcode;
    String? image;
    int? stock;
    int? price;
    int? categoryId;
    int? userId;
    int? statusId;
    DateTime? createdAt;
    DateTime? updatedAt;

    ProductModel({
        this.id,
        this.name,
        this.description,
        this.barcode,
        this.image,
        this.stock,
        this.price,
        this.categoryId,
        this.userId,
        this.statusId,
        this.createdAt,
        this.updatedAt,
    });

    factory ProductModel.fromJson(Map<String, dynamic> json) => ProductModel(
        id: json["id"],
        name: json["name"],
        description: json["description"],
        barcode: json["barcode"],
        image: json["image"],
        stock: json["stock"],
        price: json["price"],
        categoryId: json["category_id"],
        userId: json["user_id"],
        statusId: json["status_id"],
        createdAt: json["created_at"] == null ? null : DateTime.parse(json["created_at"]),
        updatedAt: json["updated_at"] == null ? null : DateTime.parse(json["updated_at"]),
    );

    Map<String, dynamic> toJson() => {
        "id": id,
        "name": name,
        "description": description,
        "barcode": barcode,
        "image": image,
        "stock": stock,
        "price": price,
        "category_id": categoryId,
        "user_id": userId,
        "status_id": statusId,
        "created_at": createdAt?.toIso8601String(),
        "updated_at": updatedAt?.toIso8601String(),
    };
}

Step 23: ‡πÄ‡∏û‡∏¥‡πà‡∏° Dio Instance with Auth ‡∏ó‡∏µ‡πà‡πÑ‡∏ü‡∏•‡πå dio_config.dart
---
class DioConfig {

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö token
  static late String _token;

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á token ‡∏à‡∏≤‡∏Å shared preference
  static _getToken() async {
    _token = Utility.getSharedPreference('token');
  }

  // Create Dio Instance with Auth
  static final Dio _dioWithAuth = Dio()
    ..interceptors.add(
      InterceptorsWrapper(
        onRequest: (options, handler) async {
          await _getToken();
          options.headers['Authorization'] = 'Bearer $_token';
          options.headers['Accept'] = 'application/json';
          options.headers['Content-Type'] = 'application/json';
          options.baseUrl = baseURLAPI;
          return handler.next(options);
        },
        onResponse: (response, handler) async {
          return handler.next(response);
        },
        onError: (DioException e, handler) {
          switch (e.response?.statusCode) {
            case 400:
              Utility().logger.e('Bad Request');
              break;
            case 401:
              Utility().logger.e('Unauthorized');
              break;
            case 403:
              Utility().logger.e('Forbidden');
              break;
            case 404:
              Utility().logger.e('Not Found');
              break;
            case 500:
              Utility().logger.e('Internal Server Error');
              break;
            default:
              Utility().logger.e('Something went wrong');
              break;
          }
          return handler.next(e);
        },
      ),
    );

  static Dio get dioWithAuth => _dioWithAuth;
.
.
}

Step 24: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô getAllProducts ‡∏ó‡∏µ‡πà‡πÑ‡∏ü‡∏•‡πå rest_api.dart
---
class CallAPI {

  final Dio _dioWithAuth = DioConfig.dioWithAuth;

  // ---------------------------------------------------------------------------
  // CRUD Product API Call Method
  // ---------------------------------------------------------------------------

  // Get All Product API -------------------------------------------------------
  Future<List<ProductModel>> getAllProducts() async {
    final response = await _dioWithAuth.get('products');
    if (response.statusCode == 200) {
      Utility().logger.d(response.data);
      final List<ProductModel> products = productModelFromJson(
        json.encode(response.data),
      );
      return products;
    }
    throw Exception('Failed to load products');
  }
  // ---------------------------------------------------------------------------
 
}

Step 25: ‡∏™‡∏£‡πâ‡∏≤‡∏á component "ImageNotFound" ‡∏ó‡∏µ‡πà‡πÑ‡∏ü‡∏•‡πå lib/components/image_not_found.dart
---
import 'package:flutter/material.dart';

class ImageNotFound extends StatelessWidget {
  const ImageNotFound({super.key});

  @override
  Widget build(BuildContext context) => const SizedBox(
    width: double.infinity,
    child: Column(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        Icon(
          Icons.image_not_supported,
          size: 50,
          color: Colors.black45,
        ),
        SizedBox(height: 8),
        Text(
          'Image not found',
          style: TextStyle(
            fontSize: 14,
          ),
        ),
      ],
    ),
  );
}

Step 26: ‡∏™‡∏£‡πâ‡∏≤‡∏á component "ProductItem" ‡∏ó‡∏µ‡πà‡πÑ‡∏ü‡∏•‡πå lib/screens/products/components/product_item.dart
---
import 'package:flutter/material.dart';
import 'package:flutter_node_store/components/image_not_found.dart';
import 'package:flutter_node_store/models/product_model.dart';
import 'package:flutter_node_store/utils/constants.dart';

class ProductItem extends StatelessWidget {

  const ProductItem({
    required this.product,
    this.onTap,
    this.isGrid,
    Key? key,
  }): super(key: key);

  final ProductModel product;
  final VoidCallback? onTap;
  final bool? isGrid;

  @override
  Widget build(BuildContext context) {
    return TextButton(
      style: TextButton.styleFrom(
        padding: EdgeInsets.zero,
      ),
      onPressed: onTap, 
      child: LayoutBuilder(
        builder: (context, constraint) => Card(
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(5),
          ),
          child: Column(
            children: [
              _buildImage(constraint.maxHeight),
              _buildInfo()
            ],
          ),
        ),
      )
    );
  }

  // _buildImage Widget
  Stack _buildImage(double maxHeight){
    
    // Check list or grid view
    // Case of list view
    var height = maxHeight * 0.70;

    // Case of grid view
    if(isGrid != null && isGrid == true){
      height = maxHeight * 0.48;
    }

    final image = product.image;

    return Stack(
      children: [
        SizedBox(
          width: double.infinity,
          height: height,
          child: image != null && image.isNotEmpty ? _image(image) : const ImageNotFound(),
        )
      ],
    );

  }

  // _image Widget
  Container _image(String image){
    String imageUrl;
    if(image.contains('://')){
      imageUrl = image;
    }else{
      imageUrl = '$baseURLImage$image';
    }
    return Container(
      decoration: BoxDecoration(
        borderRadius: const BorderRadius.only(
          topLeft: Radius.circular(5),
          topRight: Radius.circular(5),
        ),
        image: DecorationImage(
          image: NetworkImage(imageUrl),
          fit: BoxFit.cover,
        ),
      ),
    );
  }

  // _buildInfo Widget
  Expanded _buildInfo() => Expanded(
    child: Padding(
      padding: const EdgeInsets.all(8.0),
      child: Column(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            product.name ?? '',
            style: (isGrid ?? false) 
            ? const TextStyle(
              fontSize: 14.0,
              fontWeight: FontWeight.normal
            ) : const TextStyle(
              fontSize: 20.0,
              fontWeight: FontWeight.bold
            ),
            maxLines: 1,
            overflow: TextOverflow.ellipsis,
          ),
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              TextButton(
                onPressed: (){},
                child: Text(
                  '‡∏ø${product.price}',
                  style: const TextStyle(
                    fontSize: 14.0,
                    fontWeight: FontWeight.bold
                  ),
                )
              ),
              Text(
                '${product.stock} ‡∏ä‡∏¥‡πâ‡∏ô',
                style: const TextStyle(
                  fontSize: 14.0,
                  fontWeight: FontWeight.bold,
                  color: Colors.indigo
                ),
              )
            ],
          )
        ],
      ),
    )
  );


}

Step 26: ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÑ‡∏ü‡∏•‡πå home_screen.dart ‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á gridview ‡πÅ‡∏•‡∏∞ listview ‡πÄ‡∏û‡∏∑‡πà‡∏≠ return "ProductItem" ‡∏•‡∏á‡πÑ‡∏õ
---
// _gridView Widget -----------------------------------------------------------
  Widget _gridView(List<ProductModel> products) {
    return GridView.builder(
      gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
          crossAxisCount: 2 // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
          ),
      itemCount: products.length,
      itemBuilder: (context, index) {
        return Padding(
          padding: const EdgeInsets.all(8.0),
          child: ProductItem(
            isGrid: true,
            product: products[index],
            onTap: () {},
          ),
        );
      },
    );
  }
  // ---------------------------------------------------------------------------

  // _listView Widget -----------------------------------------------------------
  Widget _listView(List<ProductModel> products) {
    return ListView.builder(
      itemCount: products.length,
      itemBuilder: (context, index) {
        return Padding(
          padding: const EdgeInsets.only(top: 8.0, left: 8.0, right: 8.0),
          child: SizedBox(
            height: 350,
            child: ProductItem(
              product: products[index],
              onTap: () {},
            ),
          ),
        );
      },
    );
  }
  // ---------------------------------------------------------------------------

Step 27: ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÑ‡∏ü‡∏•‡πå home_screen.dart ‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á body ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å FutureBuilder ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API
---
body: FutureBuilder(
        future: CallAPI().getAllProducts(),
        builder: (context, AsyncSnapshot snapshot) {
          // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏°‡∏µ error
          if (snapshot.hasError) {
            return Center(
              child: Text('‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'),
            );
          } else if (snapshot.connectionState == ConnectionState.done) {
            // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            List<ProductModel> products = snapshot.data;
            return _isGridView ? _gridView(products) : _listView(products);
          } else {
            // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            return Center(
              child: CircularProgressIndicator(),
            );
          }
        },
      ),

-------------------------------------------------------
‚úà DAY 5
-------------------------------------------------------
Section 8: Workshop CRUD ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å NodeJS API (‡∏ï‡πà‡∏≠)
Section 9: ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ State ‡∏î‡πâ‡∏ß‡∏¢ Provider
Section 10: ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡πÅ‡∏≠‡∏û‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏†‡∏≤‡∏©‡∏≤
Section 11: ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ State ‡πÅ‡∏•‡∏∞ Route ‡∏î‡πâ‡∏ß‡∏¢ GetX
-------------------------------------------------------
Section 8: Workshop CRUD ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å NodeJS API (‡∏ï‡πà‡∏≠)

Step 1: ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á package (lib) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ upload / crop file ‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞ http_parser
---
  # http parser
  http_parser: ^4.0.2

  # Image Picker
  image_picker: ^1.0.1

  # Image Cropper
  image_cropper: ^5.0.0 

Step 2: config android / ios
---

‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö image_picker
----
Android - No configuration required
iOS config at <project root>/ios/Runner/Info.plist
---	<key>NSPhotoLibraryUsageDescription</key>
	<string>Used to demonstrate image picker plugin</string>
	<key>NSCameraUsageDescription</key>
	<string>Used to demonstrate image picker plugin</string>
	<key>NSMicrophoneUsageDescription</key>
	<string>Used to capture audio for image picker plugin</string>
---

‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö image_cropper
---
Android Add UCropActivity into your AndroidManifest.xml
---
<activity
    android:name="com.yalantis.ucrop.UCropActivity"
    android:screenOrientation="portrait"
    android:theme="@style/Theme.AppCompat.Light.NoActionBar"/>
---

iOS - No configuration required

Step 3: ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó rest_api.dart ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£ Create Product API Method
---
  // Create Product API Method -------------------------------------------------
  Future<String> addProductAPI(ProductModel product, {File? imageFile}) async {
    FormData data = FormData.fromMap({
      'name': product.name,
      'description': product.description,
      'barcode': product.barcode,
      'stock': product.stock,
      'price': product.price,
      'category_id': product.categoryId,
      'user_id': product.userId,
      'status_id': product.statusId,
      if (imageFile != null)
        'photo': await MultipartFile.fromFile(
          imageFile.path,
          contentType: MediaType('image', 'jpg'),
        ),
    });

    final response = await _dioWithAuth.post('products', data: data);
    if (response.statusCode == 200) {
      Utility().logger.d(response.data);
      return jsonEncode(response.data);
    }
    throw Exception('Failed to create product');
  }
  // ---------------------------------------------------------------------------

Step 4: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå product_add.dart ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà lib/screens/products/product_add.dart
---
class AppRouter {
.
static const String productAdd = 'productAdd';
.
static get routes => {
.
productAdd: (context) => const ProductAddScreen(),
};

Step 5: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏¥‡∏á‡∏Å‡πå Navigate ‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤ home_screen.dart ‡πÑ‡∏õ‡∏¢‡∏±‡∏á product_add.dart
---
actions: [
          IconButton(
            onPressed: () {
              Navigator.pushNamed(context, AppRouter.productAdd);
            },
            icon: const Icon(Icons.add),
          )
        ],

Step 6: ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏´‡∏ô‡πâ‡∏≤ product_add.dart
---

-------------------------------------------------------
‚úà DAY 6
-------------------------------------------------------
9: ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ State ‡∏î‡πâ‡∏ß‡∏¢ Provider
10: ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡πÅ‡∏≠‡∏û‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏†‡∏≤‡∏©‡∏≤
11: ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ State ‡πÅ‡∏•‡∏∞ Route ‡∏î‡πâ‡∏ß‡∏¢ GetX
-------------------------------------------------------
üîÆ 9: ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ State ‡∏î‡πâ‡∏ß‡∏¢ Provider





